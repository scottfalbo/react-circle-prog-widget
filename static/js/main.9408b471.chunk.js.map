{"version":3,"sources":["Components/DataInput.js","Components/DataDisplay.js","Components/Controller.js","App.js","reportWebVitals.js","index.js"],"names":["DataInput","props","state","query","e","this","setState","target","value","fakeQuery","a","result","Math","floor","random","updateValue","animateDisplay","className","onClick","handleSubmission","bind","Component","DataDisplay","ticker","output","prev","final","outerColor","displayColor","progressBar","toggleAnimation","bar","color","textColor","intervalId","setInterval","clearInterval","id","Controller","input","App","showAbout","console","log","src","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9408b471.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles/dataInput.css';\n\nexport class DataInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n        };\n    }\n\n    handleInput(e) {\n        this.setState({\n            query: e.target.value\n        });\n    }\n\n    handleSubmission() {\n            this.fakeQuery(this.state.query);\n    }\n\n    async fakeQuery(query) {\n        // Replace the random number generator with your business logic\n        const result = Math.floor((Math.random() * (100 - 1) + 1));\n\n        this.props.updateValue(result);\n        this.props.animateDisplay();\n        this.setState({ query: '' });\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Click the button to generate a random number.</p>\n                {/* input field to take in a query if needed */}\n                {/* <input type=\"text\" value={this.state.query} onChange={this.handleInput.bind(this)} placeholder=\"input\" required /> */}\n                <button className=\"make-box\" onClick={this.handleSubmission.bind(this)}>Generate Number</button>\n            </div>\n        )\n    }\n\n}\n\nexport default DataInput;","import React, { Component } from 'react';\nimport './styles/dataDisplay.css';\n\nexport class DataDisplay extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      output: 0,\n      value: -1,\n      final: 0,\n      bar: 'progress-circle p0',\n      textColor: '',\n      outerColor: ''\n    };\n  }\n\n  componentDidMount() {\n    //Set interval speed here to control how quickly the display counts\n    this.intervalId = setInterval(() => this.ticker(), 25);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  ticker = () => {\n    this.setState ({ value: this.props.value });\n    if (this.props.animateDisplay && this.state.output <= this.state.value - 1) {\n      this.setState(prev => ({\n        output: prev.output + 1,\n        final: this.state.output,\n        outerColor: this.displayColor(this.state.final)\n      }));\n      this.progressBar();\n\n    }\n    if (this.state.output === this.state.value - 1) {\n      this.setState({\n        final: this.state.output,\n        output: 0\n      });\n      this.props.toggleAnimation();\n    }\n  }\n\n  progressBar = () => {\n    if (this.state.output < 51)\n      this.setState({ bar: 'progress-circle p' + this.state.output });\n    else\n      this.setState({ bar: 'progress-circle over50 p' + this.state.output });\n  }\n\n  displayColor = (value) => {\n    let color;\n    if (value >= 0 && value < 25)\n      color = 'green';\n    else if (value > 24 && value < 50)\n      color = 'yellow';\n    else if (value > 49 && value < 75)\n      color = 'orange';\n    else if (value > 74)\n      color = 'red';\n\n    this.setState({\n      textColor: 'span-' + color,\n      outerColor: 'outer-color-' + color\n    });\n  }\n\n  render() {\n    return (\n      <section className=\"circle-prog-widget\">\n        <div id=\"circle-container\" className={this.state.outerColor}>\n          <div className={this.state.bar}>\n            <span id=\"number-display\" className={this.state.textColor}>\n              {this.state.final}%\n            </span>\n            <div className=\"left-half-clipper\">\n              <div className=\"first50-bar\"></div>\n              <div className=\"value-bar\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default DataDisplay;","import React, { Component } from 'react';\nimport DataInput from './DataInput';\nimport DataDisplay from './DataDisplay';\nimport './styles/controller.css';\n\nexport class Controller extends Component {\n\n    state = {\n        value: -1,\n        animateDisplay: false\n    }\n\n    updateValue = (input) => {\n        this.setState({ value: input });\n    }\n\n    animateDisplay = () => {\n        this.setState({ animateDisplay: this.state.animateDisplay ? false : true })\n    }\n\n    render() {\n        return (\n            <div className=\"make-box\">\n                <DataInput\n                    updateValue={this.updateValue}\n                    animateDisplay={this.animateDisplay}\n                />\n                <DataDisplay\n                    value={this.state.value}\n                    updateValue={this.updateValue}\n                    animateDisplay={this.state.animateDisplay}\n                    toggleAnimation={this.animateDisplay}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Controller;","import React, { Component } from 'react';\nimport Controller from './Components/Controller'\nimport './App.css';\n\nexport class App extends Component {\n\n  state = {\n    showAbout: false\n  };\n\n  handleSubmission() {\n    this.setState({\n      showAbout: this.state.showAbout ? false : true\n    });\n    console.log(this.state.showAbout);\n  }\n\n  render() {\n    return (\n      <main>\n        <h1 className=\"make-box\">React Circular Progress Widget</h1>\n        <p>This circular progress widget takes in a value between 1 and 100.  The progress wheel then loads and counts up to the value, changing colors every 25%.  Please see the README for implementation instructions.</p>\n        <Controller />\n        <button className=\"make-box\" onClick={this.handleSubmission.bind(this)}>About</button>\n        <div className={this.state.showAbout ? \"screen-dim\" : \"screen-dim hide-me\"}>\n          <section className=\"about-me\">\n            <div>\n              <figure>\n                <img src=\"./images/selfie.jpg\" alt=\"Scott Falbo\" />\n              </figure>\n              <section className=\"social\">\n                <ul>\n                  <li>\n                    <a href=\"mailto:scottfalboart@gmail.com\">scottfalboart@gmail.com</a>\n                  </li>\n                  <li>\n                    <a href=\"https://www.scottfalbo.com\" target=\"_blank\" rel=\"noreferrer\">scottfalbo.com</a>\n                  </li>\n                </ul>\n                <ul>\n                  <li>\n                    <a href=\"https://www.linkedin.com/in/scott-falbo/\" target=\"_blank\" rel=\"noreferrer\"><img src=\"./images/linkedIn-black.png\" alt=\"LinkedIn\" /></a>\n                  </li>\n                  <li>\n                    <a href=\"https://github.com/scottfalbo\" target=\"_blank\" rel=\"noreferrer\"><img src=\"./images/github.png\" alt=\"GitHub\" /></a>\n                  </li>\n                </ul>\n              </section>\n            </div>\n            <article>Hello, my name is Scott Falbo, I'm a software developer and artist in Seattle.\n              <br/>\n              I'm a huge gamer nerd that loves coding.  Learning a new language or technologies to solve a problem domain is basically studying ancient tongues to scribe spells.  HttpRequest, more like Neo-Electrical Telekinesis.  Writing code is wizardry, and who doesn't want to be a wizard.\n              <br/>\n              As a long time end game MMO gamer and puzzler I enjoy solving problems and organizing solutions.  I find great satisfaction in laying out repository patterns in .NET or figuring out entity relations for a database.  When everything works out it's like beating a level of a game.  If things don't work out it's a learning experience until they do.\n              <br/>\n              While I enjoy puzzling and problem solving I'm also a career artist with a passion for visual creation.  With a firm understanding of composition and color theory I also enjoy building attractive, accessible and functional front ends.\n              <br/>\n              Thanks for looking, let's write some spells!\n            </article>\n            <button className=\"make-box\" onClick={this.handleSubmission.bind(this)}>🗙 close</button>\n          </section>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}